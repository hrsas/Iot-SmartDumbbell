#include <ESP8266WiFi.h>
#include <ESP8266WebServer.h>
#include <Wire.h>
#include <LiquidCrystal_I2C.h>
#include <MPU6050.h>

// WiFi credentials
const char* ssid = "Harsha's Realme";
const char* password = "hahahehe";

// LCD and Web Server setup
LiquidCrystal_I2C lcd(0x27, 16, 2);  
ESP8266WebServer server(80);

// MPU6050 setup
MPU6050 mpu;

// Variables for sets, reps, and rest time
int sets = 0, reps = 0;
int currentReps = 0, currentSets = 0;
unsigned long restTime = 60000;  // Default 60 seconds rest time
unsigned long timerStart = 0;
bool repInProgress = false;  
bool restTimerActive = false;  

// Thresholds for detecting a bicep curl on X-axis
int curlStartThresholdZ = 5000;  
int curlEndThresholdZ = -5000;    

// Timer for display updates to reduce flickering
unsigned long lastUpdateTime = 0;
const unsigned long updateInterval = 500; // Update every 500 ms

// Handle root URL
void handleRoot() {
  server.send(200, "text/html", "<form action=\"/setValues\" method=\"POST\">"
                                "Sets: <input type=\"text\" name=\"sets\"><br>"
                                "Reps: <input type=\"text\" name=\"reps\"><br>"
                                "Rest Time (seconds): <input type=\"text\" name=\"restTime\"><br>"
                                "<input type=\"submit\" value=\"Submit\">"
                                "</form>");
}

// Handle form submission
void handleSetValues() {
  if (server.hasArg("sets")) {
    sets = server.arg("sets").toInt();
    Serial.println("Received sets: " + String(sets));
  }
  
  if (server.hasArg("reps")) {
    reps = server.arg("reps").toInt();
    Serial.println("Received reps: " + String(reps));
  }
  
  if (server.hasArg("restTime")) {
    restTime = server.arg("restTime").toInt() * 1000;  
    Serial.println("Received rest time: " + String(restTime));
  }

  currentSets = sets;
  currentReps = reps;

  server.send(200, "text/plain", "Values updated");
  Serial.printf("Updated Values -> Sets: %d, Reps: %d, Rest Time: %lu ms\n", sets, reps, restTime);
  displayOnLCD();  
}

// Display values on LCD without clearing (to reduce flicker)
void displayOnLCD() {
  lcd.clear();  // Clear the screen at each update for full refresh
  
  lcd.setCursor(0, 0);

  if (currentSets > 0) {
    lcd.print("Sets: ");
    lcd.print(currentSets);

    // Show either reps or rest time, but only update rest time when counting down
    lcd.setCursor(0, 1);
    if (currentReps > 0 && !restTimerActive) {
      lcd.print("Reps: ");
      lcd.print(currentReps);
    } else if (restTimerActive) {
      int remainingSeconds = (restTime - (millis() - timerStart)) / 1000;
      lcd.print("Rest: ");
      lcd.print(remainingSeconds);
      lcd.print("s   ");  // Clear remaining characters
    }
  } else {  // Display end of workout message
    lcd.setCursor(0, 0);
    lcd.print("Workout");
    lcd.setCursor(0, 1);
    lcd.print("Done!");
  }
}


// Rest Timer Logic
void startRestTimer() {
  if (!restTimerActive) {
    timerStart = millis();
    restTimerActive = true;
    Serial.println("Rest timer started...");
    displayOnLCD();  // Update LCD with rest time
  }
}

void checkRestTimer() {
  static int lastDisplayedSecond = -1;  // Track last displayed second to reduce flicker
  
  if (restTimerActive) {
    unsigned long elapsedTime = millis() - timerStart;
    int remainingSeconds = (restTime - elapsedTime) / 1000;

    // Only update display if a full second has passed
    if (remainingSeconds != lastDisplayedSecond) {
      lastDisplayedSecond = remainingSeconds;
      displayOnLCD();  // Update the rest countdown on LCD
    }

    // End rest timer if time is up
    if (elapsedTime >= restTime) {
      restTimerActive = false;
      if (currentSets > 1) {  
        startNextSet();
      } else {
        currentSets = 0;
        displayOnLCD();  // Display final output
      }
    }
  }
}

// Move to Next Set
void startNextSet() {
  currentSets--;  
  currentReps = reps;  // Reset reps for the new set
  
  Serial.printf("Starting next set: %d\n", currentSets);
  displayOnLCD();  // Update LCD for the next set
}

void setup() {
  Serial.begin(115200);
  lcd.init();
  lcd.backlight();

  // Check WiFi connection
  WiFi.begin(ssid, password);
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }
  Serial.println("\nConnected to WiFi!");
  Serial.print("IP address: ");
  Serial.println(WiFi.localIP());

  // Check MPU6050 connection
  mpu.initialize();
  lcd.setCursor(0, 0);  
  lcd.print("MPU");  // Always print "MPU" on the first line

  if (mpu.testConnection()) {
    Serial.println("MPU6050 connected successfully");
    lcd.setCursor(0, 1);  // Move to the second line
    lcd.print("Connected");  // If MPU is connected, show "Connected"
  } else {
    Serial.println("MPU6050 connection failed");
    lcd.setCursor(0, 1);  // Move to the second line
    lcd.print("MPU Not Found");  // If MPU connection fails, show "MPU Not Found"
  }

  server.on("/", handleRoot);
  server.on("/setValues", HTTP_POST, handleSetValues);
  server.begin();

  displayOnLCD();  // Update LCD display to show other workout details if required
}

void loop() {
  server.handleClient();
  
  // Update display only if interval has passed
  unsigned long currentTime = millis();
  if (currentTime - lastUpdateTime > updateInterval) {
    displayOnLCD();
    lastUpdateTime = currentTime;
  }

  checkRepCompletion();
  checkRestTimer();  
}

// Check if a rep is completed based on MPU6050 acceleration data
void checkRepCompletion() {
  int16_t ax, ay, az;
  mpu.getAcceleration(&ax, &ay, &az);

  if (currentSets > 0 && currentReps > 0) {
    if (az > curlStartThresholdX && !repInProgress) {
      repInProgress = true;
      Serial.println("Curl started...");
    }

    if (repInProgress && az < curlEndThresholdX) {
      repInProgress = false;  // Reset rep flag
      currentReps--;  // Decrease rep count
      Serial.printf("Rep completed! Reps remaining: %d\n", currentReps);
      displayOnLCD();  // Update LCD display

      if (currentReps == 0 && currentSets > 1) {  // All reps in set done, start rest timer if not last set
        startRestTimer();
      } else if (currentSets == 1 && currentReps == 0) {  // If last set and reps completed
        currentSets = 0;
        displayOnLCD();
      }
    }
  }
}
